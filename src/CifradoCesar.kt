/*
    üìå Objetivo:
    El cifrado C√©sar es una de las t√©cnicas de encriptaci√≥n m√°s antiguas. Consiste en desplazar cada letra de un mensaje un n√∫mero fijo de posiciones en el alfabeto. Por ejemplo, con un desplazamiento de 3, la letra A se convierte en D, la B en E, y as√≠ sucesivamente.

    Tu tarea es crear un programa que:

    Pida un mensaje al usuario.
    Solicite un n√∫mero de desplazamiento.
    Cifre el mensaje usando el Cifrado C√©sar.
    Muestre el mensaje cifrado en pantalla.

 */

fun main () {
    print("Ingrese el mensaje a cifrar: ")
    val mensaje = readLine() ?: ""

    print("Ingrese el n√∫mero de desplazamiento")
    val desplazamiento = readLine()?.toIntOrNull() ?: 0

    // Ciframos el mensaje y mostramos el resultado
    val mensajeCifrado = cifrarCesar(mensaje, desplazamiento)
    println("Mensaje cifrado: $mensajeCifrado")

}

fun cifrarCesar(texto: String, desplazamiento: Int) : String {
    val resultado = StringBuilder()

    for(caracter in texto ) {
        when {
            caracter.isLetter() -> {
                val base = if(caracter.isUpperCase()) 'A' else 'a'
                val nuevoCaracter = ((caracter - base + desplazamiento)% 26 + base.code).toChar()
                resultado.append(nuevoCaracter)
            }
            else -> resultado.append(caracter) // Mantener espacios y signos sin cambios
        }
    }
    return resultado.toString()
}

/*
    Puntos Claves üîë
    1Ô∏è‚É£ Leer la entrada del usuario:
    readLine() captura el texto y el n√∫mero de desplazamiento.
    toIntOrNull() convierte el n√∫mero y previene errores si no es v√°lido.

    2Ô∏è‚É£ Procesar cada letra del mensaje:
    isLetter() verifica si el car√°cter es una letra.
    isUpperCase() detecta si es may√∫scula para usar la base correcta.
    (caracter - base + desplazamiento) % 26 aplica el cifrado.

    3Ô∏è‚É£ Ignorar espacios y signos:
    Si el car√°cter no es una letra, se mantiene sin cambios.
 */