/*
Descripci√≥n:
Vamos a desarrollar un sistema de pedidos, donde el usuario podr√°:
‚úÖ Agregar pedidos, cada uno con una lista de productos.
‚úÖ Actualizar un pedido, a√±adiendo o eliminando productos.
‚úÖ Eliminar un pedido completo.
‚úÖ Listar todos los pedidos, mostrando el total a pagar.
‚úÖ Buscar pedidos por cliente.

üìå Objetivo: Practicar listas anidadas, clases, funciones y manejo de colecciones en Kotlin.

L√≥gica del Ejercicio
1Ô∏è‚É£ Creamos una clase Producto con nombre, precio y cantidad.
2Ô∏è‚É£ Creamos una clase Pedido, que tendr√° un cliente, un ID y una lista de productos.
3Ô∏è‚É£ Usamos una lista mutable para almacenar pedidos.
4Ô∏è‚É£ Implementamos funciones para cada acci√≥n (agregar, actualizar, eliminar, buscar).
5Ô∏è‚É£ Hacemos un men√∫ interactivo en consola con while (true) y when para gestionar las opciones.
 */

data class ProductoPedido(val nombre: String, var precio: Double, var cantidad: Int)
data class Pedido(val id: Int, val cliente: String, val productos: MutableList<ProductoPedido>)

// Lista mutable para almacenar los pedidos
val pedidos = mutableListOf<Pedido>()

// Funcion para agregar un nuevo pedido
fun agregarPedido() {
    print("Ingrese el nombre del cliente: ")
    val cliente = readLine()?.trim() ?: ""

    if (cliente.isBlank()){
        println("Error: El nombre del cliente no puede estar vac√≠o.")
        return
    }

    val productos = mutableListOf<ProductoPedido>()

    while (true){
        print("Ingrese el nombre del producto (o 'fin' para terminar):")
        val nombreProducto = readLine()?.trim() ?: ""
        if(nombreProducto.lowercase() == "fin") break

        print("Ingrese el precio: ")
        val precio = readLine()?.toDoubleOrNull()
        print("Ingrese la cantidad: ")
        val cantidad = readLine()?.toIntOrNull()

        if(nombreProducto.isBlank() || precio == null || cantidad == null || precio < 0 || cantidad < 0) {
            println("Error: Datos inv√°lidos. Intente de nuevo")
            continue
        }

        productos.add(ProductoPedido(nombreProducto, precio, cantidad))
    }

    if (productos.isNotEmpty()) {
        val nuevoPedido = Pedido(pedidos.size + 1, cliente, productos)
        pedidos.add(nuevoPedido)
        println("Pedido agregado con √©xito para $cliente")
    } else {
        println("Error: No se agreg√≥ ning√∫n producto.")
    }
}

// Funci√≥n para listar los pedidos y calcular el total
fun listarPedidos() {
    if(pedidos.isEmpty()){
        println("No hay pedidos registrados")
        return
    }

    println("\n Listado de Pedidos:")
    pedidos.forEach { pedido ->
        println("Pedido #${pedido.id} | Cliente: ${pedido.cliente}")
        var total = 0.0
        pedido.productos.forEach { productoPedido ->
            val subTotal = productoPedido.precio * productoPedido.cantidad
            total += subTotal
            println("Nombre: ${productoPedido.nombre} Precio: ${productoPedido.precio} Cantidad: ${productoPedido.cantidad} Subtotal: $subTotal")
        }
        println("Total a pagar: $total\n")
    }
}

fun actualizarPedido() {
    listarPedidos()
    print("Ingrese el ID del pedido a actualizar: ")
    val id = readLine()?.toIntOrNull()

    val pedido = pedidos.find { it.id == id }
    if(pedido != null) {
        println("üìå ¬øQu√© desea hacer?")
        println("1Ô∏è‚É£ Agregar producto")
        println("2Ô∏è‚É£ Eliminar producto")
        print("üëâ Opci√≥n: ")

        when(readLine()) {
            "1" -> {
                print("Nombre del nuevo producto: ")
                val nombreProducto = readLine()?.trim() ?: ""

                print("Precio: ")
                val precio = readLine()?.toDoubleOrNull()
                print("Cantidad: ")
                val cantidad = readLine()?.toIntOrNull()

                if (nombreProducto.isBlank() || precio == null || cantidad == null || precio < 0 || cantidad < 0){
                    println("Error: Datos inv√°lidos")
                } else {
                    pedido.productos.add(ProductoPedido(nombreProducto, precio, cantidad))
                    println("Produto agregado al pedido")
                }
            }
            "2" -> {
                print("Nombre del producto a eliminar: ")
                val nombreProducto = readLine()?.trim() ?: ""

                if (pedido.productos.removeIf{ it.nombre == nombreProducto}) {
                    println("Producto eliminado del pedido")
                } else {
                    println("No se encontro el producto en el pedido")
                }
            }
            else -> println("Opcion inv√°lida")
        }
    } else {
        println("No se encontro un pedido con ese ID")
    }
}

fun eliminarPedido() {
    listarPedidos()
    println("Ingrese el ID del pedido a eliminar: ")
    val id = readLine()?.toIntOrNull()

    if(pedidos.removeIf { it.id == id }) {
        println("Pedido eliminado con exito")
    } else {
        println("No se encontro un pedido con ese ID")
    }
}

fun buscarPedidoPorCliente() {
    print("Ingrese el nombre del cliente: ")
    val cliente = readLine()?.trim() ?: ""

    val pedidosCliente = pedidos.filter {it.cliente.equals(cliente, ignoreCase = true)}

    if (pedidosCliente.isEmpty()){
        println("No se encontraron pedidos para $cliente")
    } else {
        println("\n Pedidos de $cliente:")
        pedidosCliente.forEach { pedido ->
            println("ID Pedido: #${pedido.id}")
            pedido.productos.forEach { productoPedido ->
                println("Nombre: ${productoPedido.nombre} Precio: ${productoPedido.precio} Cantidad: ${productoPedido.cantidad}")
            }
        }
    }
}

fun main() {
    while (true) {
        println("\n=== üì¶ GESTOR DE PEDIDOS ===")
        println("1Ô∏è‚É£ Agregar pedido")
        println("2Ô∏è‚É£ Listar pedidos")
        println("3Ô∏è‚É£ Actualizar pedido")
        println("4Ô∏è‚É£ Eliminar pedido")
        println("5Ô∏è‚É£ Buscar pedido por cliente")
        println("6Ô∏è‚É£ Salir")
        print("üëâ Ingrese una opci√≥n: ")

        when(readLine()) {
            "1" -> agregarPedido()
            "2" -> listarPedidos()
            "3" -> actualizarPedido()
            "4" -> eliminarPedido()
            "5" -> buscarPedidoPorCliente()
            "6" -> {
                println("üëã Saliendo del gestor de pedidos.")
                break
            }
            else -> println("‚ùå Opci√≥n inv√°lida. Intente de nuevo.")
        }
    }
}